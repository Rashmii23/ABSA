# -*- coding: utf-8 -*-
"""IBO_conversion.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1N6gZuSn52OFTjZZHuGEzW6mCYvcD73f1
"""

# Load and preprocess your dataset
import pandas as pd
dataset = pd.read_csv('input.csv')
dataset

"""IBO conversion after dataset cleaning and preprocessing"""

import csv

def format_data(texts, annotations):
    formatted_data = []
    for text, annotation in zip(texts, annotations):
        tokens = text.split()
        tags = ['0'] * len(tokens)  # Initialize all tags as 'O' (Outside)
        polarities = [-1] * len(tokens)  # Initialize all polarities as -1

        aspect_terms = eval(annotation)  # Parse the annotation string

        if len(aspect_terms) > 0:
            for aspect_term in aspect_terms:
                aspect_text, aspect_sentiment = aspect_term.split(':')
                aspect_text_tokens = aspect_text.split()

                # Find the start index of the aspect term in the tokenized text
                start_index = find_term_index(tokens, aspect_text_tokens, match_type='start')

                # Check if the index is within range
                if start_index is not None and start_index < len(tokens):
                    tags[start_index] = '1'
                    polarity = -1  # Placeholder for unknown polarity
                    if aspect_sentiment == 'positive':
                        polarity = 0
                    elif aspect_sentiment == 'negative':
                        polarity = 1
                    elif aspect_sentiment == 'neutral':
                        polarity = 2
                    polarities[start_index] = polarity
                    for i in range(1, len(aspect_text_tokens)):
                        index = start_index + i
                        if index < len(tokens):
                            if i > 0:
                                tags[index] = '2'
                            polarities[index] = polarity

        # Add the tokenized text, corresponding tags, and polarities to the formatted data
        formatted_data.append((tokens, tags, polarities, aspect_terms))

    return formatted_data

def find_term_index(tokens, term_tokens, match_type='start'):
    token_index = None
    for i in range(len(tokens) - len(term_tokens) + 1):
        if tokens[i:i+len(term_tokens)] == term_tokens:
            token_index = i
            if match_type == 'start':
                break
    return token_index

def read_data_from_csv(file_path):
    texts = []
    annotations = []
    with open(file_path, 'r', encoding='utf-8') as csv_file:
        reader = csv.DictReader(csv_file)
        for row in reader:
            texts.append(row['Text_Stemmed'])
            annotations.append(row['Term'])
    return texts, annotations

def write_data_to_csv(file_path, formatted_data):
    with open(file_path, 'w', encoding='utf-8', newline='') as csv_file:
        fieldnames = ['Text', 'Tags', 'Polarities']
        writer = csv.DictWriter(csv_file, fieldnames=fieldnames)
        writer.writeheader()
        for tokens, tags, polarities, aspect_terms in formatted_data:
            text = ' '.join(tokens)
            # Join tags and polarities with a comma
            tags_str = ' '.join(tags)
            polarities_str = ' '.join(map(str, polarities))
            writer.writerow({'Text': text, 'Tags': tags_str, 'Polarities': polarities_str})


input_file = 'input_final.csv'
output_file = 'final1.csv'

texts, annotations = read_data_from_csv(input_file)
formatted_data = format_data(texts, annotations)
write_data_to_csv(output_file, formatted_data)

import pandas as pd
dataset = pd.read_csv('final1.csv', encoding='utf-8-sig')
dataset.head(20)